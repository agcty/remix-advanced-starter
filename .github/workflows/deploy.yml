name: üöÄ Deploy
on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

env:
  NODE_VERSION: "20"
  SENTRY_ORG: ${{ secrets.SENTRY_AUTH }}
  POSTGRES_DB: testdb
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpass
  PNPM_VERSION: 9

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  setup:
    name: üèó Setup
    runs-on: ubuntu-22.04
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üì• Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: üì¶ Install dependencies
        run: pnpm install

      - name: üíæ Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: üèó Build project
        run: pnpm run build

      - name: üíæ Cache build
        uses: actions/cache@v3
        with:
          path: |
            build
            server-build
          key: ${{ runner.os }}-remix-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-remix-

  lint:
    name: ‚¨£ ESLint
    needs: setup
    runs-on: ubuntu-22.04
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üì• Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: üì¶ Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: üî¨ Lint
        run: pnpm run lint

  typecheck:
    name:  ¶ TypeScript
    needs: setup
    runs-on: ubuntu-22.04
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üì• Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: üì¶ Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: üîé Type check
        run: pnpm run typecheck

  test:
    name: üß™ Test
    needs: setup
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üì• Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: üì¶ Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: üì¶ Restore build
        uses: actions/cache@v3
        with:
          path: |
            build
            server-build
          key: ${{ runner.os }}-remix-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}

      - name: üß™ Run tests
        run: pnpm run test
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-22.04
    needs: [lint, typecheck, test]
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: "50"

      - name: üëÄ Read app name
        uses: SebRollen/toml-action@v1.2.0
        id: app_name
        with:
          file: "fly.toml"
          field: "app"

      - name: üéà Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@1.5

      - name: üöÄ Deploy Staging
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: flyctl deploy --remote-only
          --build-arg COMMIT_SHA=${{ github.sha }}
          --build-arg SENTRY_ORG=${{ secrets.SENTRY_ORG }}
          --build-arg SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          --build-secret SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          --app ${{ steps.app_name.outputs.value }}-staging
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: üöÄ Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        run: flyctl deploy --remote-only
          --build-arg COMMIT_SHA=${{ github.sha }}
          --build-arg SENTRY_ORG=${{ secrets.SENTRY_ORG }}
          --build-arg SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          --build-secret SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
