name: üöÄ Deploy
on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "9"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-22.04

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: üî¨ Lint
        run: pnpm run lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-22.04
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: üîé Type check
        run: pnpm run typecheck

  test:
    name: üß™ Test
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: üß™ Run tests
        run: pnpm run test
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass

  migrate:
    name: üõ∏ Run Database Migrations
    runs-on: ubuntu-22.04
    needs: [lint, typecheck, test]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Execute migrations
        run: pnpm run migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-22.04
    needs: [lint, typecheck, test, migrate]
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: "50"

      - name: üëÄ Read app name
        uses: SebRollen/toml-action@v1.2.0
        id: app_name
        with:
          file: "fly.toml"
          field: "app"

      - name: üéà Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@1.5

      - name: üöÄ Deploy Staging
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: flyctl deploy --remote-only
          --build-arg COMMIT_SHA=${{ github.sha }}
          --build-arg SENTRY_ORG=${{ secrets.SENTRY_ORG }}
          --build-arg SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          --build-secret SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          --app ${{ steps.app_name.outputs.value }}-staging
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: üöÄ Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        run: flyctl deploy --remote-only
          --build-arg COMMIT_SHA=${{ github.sha }}
          --build-arg SENTRY_ORG=${{ secrets.SENTRY_ORG }}
          --build-arg SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          --build-secret SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
